import os
from dotenv import load_dotenv
import psycopg2
from psycopg2 import Error
import telebot
from telebot import types, TeleBot, custom_filters
from telebot.storage import StateMemoryStorage
from telebot.handler_backends import State, StatesGroup
import random

load_dotenv()

print('Start telegram bot...')

state_storage = StateMemoryStorage()
token_bot = os.getenv('TOKEN')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–π–º–∞—É—Ç–æ–≤
telebot.apihelper.CONNECT_TIMEOUT = 30
telebot.apihelper.READ_TIMEOUT = 30

bot = TeleBot(token_bot, state_storage=state_storage, parse_mode=None)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
try:
    connection = psycopg2.connect(
        user=os.getenv('DB_USER'),
        password=os.getenv('DB_PASSWORD'),
        host=os.getenv('DB_HOST'),
        port="5432",
        database=os.getenv('DB_NAME'),
        client_encoding='utf8'
    )
    cursor = connection.cursor()
    print("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
except (Exception, Error) as error:
    print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ PostgreSQL:", error)

known_users = []
userStep = {}
buttons = []
current_word_data = {}  # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å–ª–æ–≤–∞


def show_hint(*lines):
    return '\n'.join(lines)


def show_target(data):
    return f"{data['target_word']} -> {data['translate_word']}"


class Command:
    ADD_WORD = '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï'
    DELETE_WORD = '–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æüîô'
    NEXT = '–î–∞–ª—å—à–µ ‚è≠'
    RESTART = '–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ üîÑ'


class MyStates(StatesGroup):
    target_word = State()
    translate_word = State()
    another_words = State()
    add_word = State()


def get_user_step(uid):
    if uid in userStep:
        return userStep[uid]
    else:
        known_users.append(uid)
        userStep[uid] = 0
        print("New user detected, who hasn't used \"/start\" yet")
        return 0


def reset_user_progress(user_id):
    try:
        cursor.execute("""
            DELETE FROM user_words 
            WHERE user_id = %s
        """, (user_id,))
        connection.commit()
        print(f"–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–±—Ä–æ—à–µ–Ω")
    except (Exception, Error) as error:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {error}")
        connection.rollback()  # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ


def get_random_word(user_id, show_all=False):
    try:
        print(f"–ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        if show_all:
            cursor.execute("""
                SELECT w.word_id, w.word, w.translation 
                FROM words w
                WHERE w.word_id NOT IN (
                    SELECT word_id 
                    FROM user_words 
                    WHERE user_id = %s
                )
                ORDER BY RANDOM()
                LIMIT 1
            """, (user_id,))
        else:
            cursor.execute("""
                SELECT w.word_id, w.word, w.translation 
                FROM words w
                LEFT JOIN user_words uw ON w.word_id = uw.word_id AND uw.user_id = %s
                WHERE uw.user_id IS NULL
                ORDER BY RANDOM()
                LIMIT 1
            """, (user_id,))
        result = cursor.fetchone()
        if result:
            print(f"–ù–∞–π–¥–µ–Ω–æ —Å–ª–æ–≤–æ: {result}")
        else:
            print("–°–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return result
    except (Exception, Error) as error:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª–æ–≤–∞: {error}")
        connection.rollback()
        return None


def get_random_other_words(word_id, count=3):
    try:
        cursor.execute("""
            SELECT word, translation 
            FROM words 
            WHERE word_id != %s 
            ORDER BY RANDOM() 
            LIMIT %s
        """, (word_id, count))
        return cursor.fetchall()
    except (Exception, Error) as error:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥—Ä—É–≥–∏—Ö —Å–ª–æ–≤:", error)
        return []


def add_user_word(user_id, word_id):
    try:
        print(f"–î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–æ {word_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –∑–∞–ø–∏—Å—å
        cursor.execute("""
            SELECT 1 FROM user_words 
            WHERE user_id = %s AND word_id = %s
        """, (user_id, word_id))
        if not cursor.fetchone():
            cursor.execute("""
                INSERT INTO user_words (user_id, word_id) 
                VALUES (%s, %s)
            """, (user_id, word_id))
            connection.commit()
            print("–°–ª–æ–≤–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
            return True
        print("–°–ª–æ–≤–æ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return False
    except (Exception, Error) as error:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {error}")
        connection.rollback()
        return False


def delete_user_word(user_id, word_id):
    try:
        cursor.execute("""
            DELETE FROM user_words 
            WHERE user_id = %s AND word_id = %s
        """, (user_id, word_id))
        connection.commit()
    except (Exception, Error) as error:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error)


def add_new_word(message):
    try:
        cid = message.chat.id
        user_id = message.from_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not ensure_user_exists(user_id, message.from_user.username):
            bot.send_message(cid, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ
        bot.send_message(cid, "–í–≤–µ–¥–∏—Ç–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ:")
        bot.register_next_step_handler(message, lambda m: process_english_word(m, user_id))
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞: {e}")
        try:
            bot.send_message(cid, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e}")


def process_english_word(message, user_id):
    try:
        cid = message.chat.id
        english_word = message.text.strip().lower()

        if not english_word:
            bot.send_message(cid, "–°–ª–æ–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–µ —Å–ª–æ–≤–æ
        conn = get_connection()
        if not conn:
            bot.send_message(cid, "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return

        try:
            with conn:
                with conn.cursor() as cur:
                    cur.execute(
                        "SELECT id FROM words WHERE LOWER(target_word) = %s",
                        (english_word,)
                    )
                    if cur.fetchone():
                        bot.send_message(
                            cid,
                            "–¢–∞–∫–æ–µ —Å–ª–æ–≤–æ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."
                        )
                        return

            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥
            bot.send_message(cid, "–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞:")
            bot.register_next_step_handler(
                message,
                lambda m: process_translation(m, english_word, user_id)
            )
        finally:
            conn.close()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —Å–ª–æ–≤–∞: {e}")
        try:
            bot.send_message(cid, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e}")


def process_translation(message, english_word, user_id):
    try:
        cid = message.chat.id
        translation = message.text.strip()

        if not translation:
            bot.send_message(cid, "–ü–µ—Ä–µ–≤–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        conn = get_connection()
        if not conn:
            bot.send_message(cid, "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return

        try:
            with conn:
                with conn.cursor() as cur:
                    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–æ
                    cur.execute(
                        "INSERT INTO words (target_word, translate_word) "
                        "VALUES (%s, %s) RETURNING id",
                        (english_word, translation)
                    )
                    word_id = cur.fetchone()[0]

                    # –°—Ä–∞–∑—É –¥–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    cur.execute(
                        "INSERT INTO user_words (user_id, word_id) "
                        "VALUES (%s, %s) ON CONFLICT DO NOTHING",
                        (user_id, word_id)
                    )

            bot.send_message(
                cid,
                f"–°–ª–æ–≤–æ '{english_word}' —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º '{translation}' "
                "—É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –≤–∞—à —Å–ª–æ–≤–∞—Ä—å!"
            )
        finally:
            conn.close()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
        try:
            bot.send_message(cid, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e}")


def ensure_user_exists(user_id, username):
    try:
        print(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")  # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        cursor.execute("""
            SELECT user_id FROM users WHERE user_id = %s
        """, (user_id,))
        if not cursor.fetchone():
            print(f"–°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")  # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            cursor.execute("""
                INSERT INTO users (user_id, username) 
                VALUES (%s, %s)
            """, (user_id, username))
            connection.commit()
            print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")  # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    except (Exception, Error) as error:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ/—Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {error}")  # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ


@bot.message_handler(commands=['cards', 'start'])
def create_cards(message):
    try:
        cid = message.chat.id
        if cid not in known_users:
            known_users.append(cid)
            userStep[cid] = 0
            bot.send_message(cid, "–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π—Ç–µ –∏–∑—É—á–∞—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫ –≤–º–µ—Å—Ç–µ! üá¨üáß")
            ensure_user_exists(cid, message.from_user.username)
        
        word_data = get_random_word(cid, show_all=True)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Å–ª–æ–≤–∞
        if not word_data:
            bot.send_message(cid, "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã—É—á–∏–ª–∏ –≤—Å–µ —Å–ª–æ–≤–∞! üéâ")
            return

        word_id, target_word, translate = word_data
        other_words = get_random_other_words(word_id)
        
        markup = types.ReplyKeyboardMarkup(row_width=2)
        global buttons
        buttons = []
        
        target_word_btn = types.KeyboardButton(target_word)
        buttons.append(target_word_btn)
        other_words_btns = [types.KeyboardButton(word[0]) for word in other_words]
        buttons.extend(other_words_btns)
        random.shuffle(buttons)
        
        next_btn = types.KeyboardButton(Command.NEXT)
        add_word_btn = types.KeyboardButton(Command.ADD_WORD)
        delete_word_btn = types.KeyboardButton(Command.DELETE_WORD)
        restart_btn = types.KeyboardButton(Command.RESTART)
        buttons.extend([next_btn, add_word_btn, delete_word_btn, restart_btn])
        
        markup.add(*buttons)
        
        greeting = f"–í—ã–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞:\nüá∑üá∫ {translate}"
        bot.send_message(message.chat.id, greeting, reply_markup=markup)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        current_word_data[cid] = {
            'target_word': target_word,
            'translate_word': translate,
            'word_id': word_id
        }
        print(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ —Ç–µ–∫—É—â–µ–µ —Å–ª–æ–≤–æ: {current_word_data[cid]}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏: {e}")
        try:
            bot.send_message(cid, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e}")


@bot.message_handler(func=lambda message: message.text == Command.NEXT)
def next_cards(message):
    try:
        cid = message.chat.id
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –Ω–æ–≤–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
        bot.delete_state(message.from_user.id, message.chat.id)
        create_cards(message)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ —Å–ª–µ–¥—É—é—â–µ–π –∫–∞—Ä—Ç–æ—á–∫–µ: {e}")
        try:
            bot.send_message(cid, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            create_cards(message)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e}")


@bot.message_handler(func=lambda message: message.text == Command.DELETE_WORD)
def delete_word(message):
    cid = message.chat.id
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        if 'word_id' in data:
            delete_user_word(cid, data['word_id'])
            bot.send_message(cid, "–°–ª–æ–≤–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –≤–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞! ‚úÖ")
        else:
            bot.send_message(cid, "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    create_cards(message)


@bot.message_handler(func=lambda message: message.text == Command.ADD_WORD)
def add_word(message):
    cid = message.chat.id
    bot.send_message(cid, "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º:")
    bot.set_state(message.from_user.id, MyStates.add_word, message.chat.id)


@bot.message_handler(state=MyStates.add_word)
def process_add_word(message):
    cid = message.chat.id
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['new_word'] = message.text
        bot.send_message(cid, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥:")
        bot.set_state(message.from_user.id, MyStates.translate_word, message.chat.id)


@bot.message_handler(state=MyStates.translate_word)
def process_translate_word(message):
    cid = message.chat.id
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        if 'new_word' in data:
            word_id = add_new_word(message)
            if word_id:
                add_user_word(cid, word_id)
                bot.send_message(cid, "–°–ª–æ–≤–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ! ‚úÖ")
            else:
                bot.send_message(cid, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            bot.delete_state(message.from_user.id, message.chat.id)
            create_cards(message)


@bot.message_handler(func=lambda message: message.text == Command.RESTART)
def restart_bot(message):
    cid = message.chat.id
    bot.send_message(cid, "–ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    reset_user_progress(cid)  # –°–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    create_cards(message)


@bot.message_handler(func=lambda message: True, content_types=['text'])
def message_reply(message):
    try:
        cid = message.chat.id
        text = message.text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã
        if text == Command.RESTART:
            restart_bot(message)
            return
        elif text == Command.ADD_WORD:
            add_word(message)
            return
        elif text == Command.DELETE_WORD:
            delete_word(message)
            return
        elif text == Command.NEXT:
            next_cards(message)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–ª–æ–≤–∞
        if cid not in current_word_data:
            print("–ù–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–ª–æ–≤–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É")
            create_cards(message)
            return
        
        current_data = current_word_data[cid]
        current_word = current_data['target_word']
        current_translation = current_data['translate_word']
        current_word_id = current_data['word_id']
        
        print(f"–¢–µ–∫—É—â–µ–µ —Å–ª–æ–≤–æ: '{current_word}', –ø–µ—Ä–µ–≤–æ–¥ '{current_translation}', ID {current_word_id}")
        print(f"–°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç—ã: '{text}' –∏ '{current_word}'")
        
        if text.strip().lower() == current_word.strip().lower():
            # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            print(f"–û—Ç–≤–µ—Ç –≤–µ—Ä–Ω—ã–π! –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–æ {current_word_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {cid}")
            if add_user_word(cid, current_word_id):
                hint = show_target(current_data)
                hint_text = ["–û—Ç–ª–∏—á–Ω–æ!‚ù§", hint]
                hint = show_hint(*hint_text)
                markup = types.ReplyKeyboardMarkup(row_width=2)
                markup.add(*buttons)
                bot.send_message(cid, hint, reply_markup=markup)
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É
                create_cards(message)
            else:
                # –ï—Å–ª–∏ —Å–ª–æ–≤–æ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É
                create_cards(message)
        else:
            # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            print(f"–û—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π! –û–∂–∏–¥–∞–ª–æ—Å—å: '{current_word}', –ø–æ–ª—É—á–µ–Ω–æ: '{text}'")
            hint = show_hint("–î–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞!",
                           f"–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –≤—Å–ø–æ–º–Ω–∏—Ç—å —Å–ª–æ–≤–æ üá∑üá∫{current_translation}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            markup = types.ReplyKeyboardMarkup(row_width=2)
            current_buttons = []
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            target_word_btn = types.KeyboardButton(current_word)
            current_buttons.append(target_word_btn)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥—Ä—É–≥–∏–µ —Å–ª–æ–≤–∞ –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞
            other_words = get_random_other_words(current_word_id)
            other_words_btns = [types.KeyboardButton(word[0]) for word in other_words]
            current_buttons.extend(other_words_btns)
            random.shuffle(current_buttons)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            next_btn = types.KeyboardButton(Command.NEXT)
            add_word_btn = types.KeyboardButton(Command.ADD_WORD)
            delete_word_btn = types.KeyboardButton(Command.DELETE_WORD)
            restart_btn = types.KeyboardButton(Command.RESTART)
            current_buttons.extend([next_btn, add_word_btn, delete_word_btn, restart_btn])
            
            markup.add(*current_buttons)
            bot.send_message(cid, hint, reply_markup=markup)
            
            # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–ª–æ–≤–æ
            print(f"–û—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–ª–æ–≤–æ: '{current_word}', –ø–µ—Ä–µ–≤–æ–¥ '{current_translation}', ID {current_word_id}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        try:
            bot.send_message(cid, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            create_cards(message)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e}")


bot.add_custom_filter(custom_filters.StateFilter(bot))

bot.infinity_polling(skip_pending=True)